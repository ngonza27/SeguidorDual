# Import libraries
import RPi.GPIO as GPIO
import time

# Set GPIO numbering mode
GPIO.setmode(GPIO.BOARD)

# Set pin 11 as an output, and set servo1 as pin 11 as PWM
GPIO.setup(40,GPIO.OUT)
servo1 = GPIO.PWM(40,50) # Note 11 is pin, 50 = 50Hz pulse

#start PWM running, but with value of 0 (pulse off)
servo1.start(0)


anglesMap = {
0 : 2.8 ,
1 : 2.8470999999999997 ,
2 : 2.8941999999999997 ,
3 : 2.9412999999999996 ,
4 : 2.9883999999999995 ,
5 : 3.0354999999999994 ,
6 : 3.0825999999999993 ,
7 : 3.1296999999999993 ,
8 : 3.176799999999999 ,
9 : 3.223899999999999 ,
10 : 3.270999999999999 ,
11 : 3.318099999999999 ,
12 : 3.365199999999999 ,
13 : 3.412299999999999 ,
14 : 3.4593999999999987 ,
15 : 3.5064999999999986 ,
16 : 3.5535999999999985 ,
17 : 3.6006999999999985 ,
18 : 3.6477999999999984 ,
19 : 3.6948999999999983 ,
20 : 3.741999999999998 ,
21 : 3.789099999999998 ,
22 : 3.836199999999998 ,
23 : 3.883299999999998 ,
24 : 3.930399999999998 ,
25 : 3.977499999999998 ,
26 : 4.024599999999998 ,
27 : 4.071699999999998 ,
28 : 4.1187999999999985 ,
29 : 4.165899999999999 ,
30 : 4.212999999999999 ,
31 : 4.2600999999999996 ,
32 : 4.3072 ,
33 : 4.3543 ,
34 : 4.401400000000001 ,
35 : 4.448500000000001 ,
36 : 4.495600000000001 ,
37 : 4.542700000000002 ,
38 : 4.589800000000002 ,
39 : 4.6369000000000025 ,
40 : 4.684000000000003 ,
41 : 4.731100000000003 ,
42 : 4.7782000000000036 ,
43 : 4.825300000000004 ,
44 : 4.872400000000004 ,
45 : 4.919500000000005 ,
46 : 4.966600000000005 ,
47 : 5.013700000000005 ,
48 : 5.060800000000006 ,
49 : 5.107900000000006 ,
50 : 5.1550000000000065 ,
51 : 5.202100000000007 ,
52 : 5.249200000000007 ,
53 : 5.296300000000008 ,
54 : 5.343400000000008 ,
55 : 5.390500000000008 ,
56 : 5.437600000000009 ,
57 : 5.484700000000009 ,
58 : 5.531800000000009 ,
59 : 5.57890000000001 ,
60 : 5.62600000000001 ,
61 : 5.6731000000000105 ,
62 : 5.720200000000011 ,
63 : 5.767300000000011 ,
64 : 5.814400000000012 ,
65 : 5.861500000000012 ,
66 : 5.908600000000012 ,
67 : 5.955700000000013 ,
68 : 6.002800000000013 ,
69 : 6.049900000000013 ,
70 : 6.097000000000014 ,
71 : 6.144100000000014 ,
72 : 6.1912000000000145 ,
73 : 6.238300000000015 ,
74 : 6.285400000000015 ,
75 : 6.332500000000016 ,
76 : 6.379600000000016 ,
77 : 6.426700000000016 ,
78 : 6.473800000000017 ,
79 : 6.520900000000017 ,
80 : 6.568000000000017 ,
81 : 6.615100000000018 ,
82 : 6.662200000000018 ,
83 : 6.7093000000000185 ,
84 : 6.756400000000019 ,
85 : 6.803500000000019 ,
86 : 6.85060000000002 ,
87 : 6.89770000000002 ,
88 : 6.94480000000002 ,
89 : 6.991900000000021 ,
90 : 7.039000000000021 ,
91 : 7.086100000000021 ,
92 : 7.133200000000022 ,
93 : 7.180300000000022 ,
94 : 7.2274000000000225 ,
95 : 7.274500000000023 ,
96 : 7.321600000000023 ,
97 : 7.368700000000024 ,
98 : 7.415800000000024 ,
99 : 7.462900000000024 ,
100 : 7.510000000000025 ,
101 : 7.557100000000025 ,
102 : 7.604200000000025 ,
103 : 7.651300000000026 ,
104 : 7.698400000000026 ,
105 : 7.7455000000000265 ,
106 : 7.792600000000027 ,
107 : 7.839700000000027 ,
108 : 7.886800000000028 ,
109 : 7.933900000000028 ,
110 : 7.981000000000028 ,
111 : 8.028100000000029 ,
112 : 8.075200000000029 ,
113 : 8.12230000000003 ,
114 : 8.16940000000003 ,
115 : 8.21650000000003 ,
116 : 8.26360000000003 ,
117 : 8.31070000000003 ,
118 : 8.357800000000031 ,
119 : 8.404900000000032 ,
120 : 8.452000000000032 ,
121 : 8.499100000000032 ,
122 : 8.546200000000033 ,
123 : 8.593300000000033 ,
124 : 8.640400000000033 ,
125 : 8.687500000000034 ,
126 : 8.734600000000034 ,
127 : 8.781700000000034 ,
128 : 8.828800000000035 ,
129 : 8.875900000000035 ,
130 : 8.923000000000036 ,
131 : 8.970100000000036 ,
132 : 9.017200000000036 ,
133 : 9.064300000000037 ,
134 : 9.111400000000037 ,
135 : 9.158500000000037 ,
136 : 9.205600000000038 ,
137 : 9.252700000000038 ,
138 : 9.299800000000038 ,
139 : 9.346900000000039 ,
140 : 9.39400000000004 ,
141 : 9.44110000000004 ,
142 : 9.48820000000004 ,
143 : 9.53530000000004 ,
144 : 9.58240000000004 ,
145 : 9.629500000000041 ,
146 : 9.676600000000041 ,
147 : 9.723700000000042 ,
148 : 9.770800000000042 ,
149 : 9.817900000000042 ,
150 : 9.865000000000043 ,
151 : 9.912100000000043 ,
152 : 9.959200000000044 ,
153 : 10.006300000000044 ,
154 : 10.053400000000044 ,
155 : 10.100500000000045 ,
156 : 10.147600000000045 ,
157 : 10.194700000000045 ,
158 : 10.241800000000046 ,
159 : 10.288900000000046 ,
160 : 10.336000000000046 ,
161 : 10.383100000000047 ,
162 : 10.430200000000047 ,
163 : 10.477300000000048 ,
164 : 10.524400000000048 ,
165 : 10.571500000000048 ,
166 : 10.618600000000049 ,
167 : 10.665700000000049 ,
168 : 10.71280000000005 ,
169 : 10.75990000000005 ,
170 : 10.80700000000005 ,
171 : 10.85410000000005 ,
172 : 10.90120000000005 ,
173 : 10.948300000000051 ,
174 : 10.995400000000052 ,
175 : 11.042500000000052 ,
176 : 11.089600000000052 ,
177 : 11.136700000000053 ,
178 : 11.183800000000053 ,
179 : 11.230900000000053 ,
180 : 11.278000000000054
}


while True:
 print("Input angle:")
 d = int(input())
 servo1.ChangeDutyCycle(anglesMap[d])
 time.sleep(0.5)
 servo1.ChangeDutyCycle(0)

#Clean things up at the end
servo1.stop()
GPIO.cleanup()
print ("Goodbye")


