# Import libraries
import RPi.GPIO as GPIO
import time

# Set GPIO numbering mode
GPIO.setmode(GPIO.BOARD)

# Set pin 11 as an output, and set servo1 as pin 11 as PWM
GPIO.setup(40,GPIO.OUT)
servo1 = GPIO.PWM(40,50) # Note 11 is pin, 50 = 50Hz pulse

#start PWM running, but with value of 0 (pulse off)
servo1.start(0)

anglesMap = {
0 : 2.8 ,
1 : 2.8489999999999998 ,
2 : 2.8979999999999997 ,
3 : 2.9469999999999996 ,
4 : 2.9959999999999996 ,
5 : 3.0449999999999995 ,
6 : 3.0939999999999994 ,
7 : 3.1429999999999993 ,
8 : 3.1919999999999993 ,
9 : 3.240999999999999 ,
10 : 3.289999999999999 ,
11 : 3.338999999999999 ,
12 : 3.387999999999999 ,
13 : 3.436999999999999 ,
14 : 3.485999999999999 ,
15 : 3.534999999999999 ,
16 : 3.5839999999999987 ,
17 : 3.6329999999999987 ,
18 : 3.6819999999999986 ,
19 : 3.7309999999999985 ,
20 : 3.7799999999999985 ,
21 : 3.8289999999999984 ,
22 : 3.8779999999999983 ,
23 : 3.9269999999999983 ,
24 : 3.975999999999998 ,
25 : 4.024999999999999 ,
26 : 4.073999999999999 ,
27 : 4.122999999999999 ,
28 : 4.172 ,
29 : 4.221 ,
30 : 4.2700000000000005 ,
31 : 4.319000000000001 ,
32 : 4.368000000000001 ,
33 : 4.417000000000002 ,
34 : 4.466000000000002 ,
35 : 4.515000000000002 ,
36 : 4.564000000000003 ,
37 : 4.613000000000003 ,
38 : 4.6620000000000035 ,
39 : 4.711000000000004 ,
40 : 4.760000000000004 ,
41 : 4.809000000000005 ,
42 : 4.858000000000005 ,
43 : 4.907000000000005 ,
44 : 4.956000000000006 ,
45 : 5.005000000000006 ,
46 : 5.0540000000000065 ,
47 : 5.103000000000007 ,
48 : 5.152000000000007 ,
49 : 5.201000000000008 ,
50 : 5.250000000000008 ,
51 : 5.299000000000008 ,
52 : 5.348000000000009 ,
53 : 5.397000000000009 ,
54 : 5.4460000000000095 ,
55 : 5.49500000000001 ,
56 : 5.54400000000001 ,
57 : 5.593000000000011 ,
58 : 5.642000000000011 ,
59 : 5.691000000000011 ,
60 : 5.740000000000012 ,
61 : 5.789000000000012 ,
62 : 5.8380000000000125 ,
63 : 5.887000000000013 ,
64 : 5.936000000000013 ,
65 : 5.985000000000014 ,
66 : 6.034000000000014 ,
67 : 6.083000000000014 ,
68 : 6.132000000000015 ,
69 : 6.181000000000015 ,
70 : 6.2300000000000155 ,
71 : 6.279000000000016 ,
72 : 6.328000000000016 ,
73 : 6.377000000000017 ,
74 : 6.426000000000017 ,
75 : 6.475000000000017 ,
76 : 6.524000000000018 ,
77 : 6.573000000000018 ,
78 : 6.6220000000000185 ,
79 : 6.671000000000019 ,
80 : 6.720000000000019 ,
81 : 6.76900000000002 ,
82 : 6.81800000000002 ,
83 : 6.86700000000002 ,
84 : 6.916000000000021 ,
85 : 6.965000000000021 ,
86 : 7.0140000000000216 ,
87 : 7.063000000000022 ,
88 : 7.112000000000022 ,
89 : 7.161000000000023 ,
90 : 7.210000000000023 ,
91 : 7.259000000000023 ,
92 : 7.308000000000024 ,
93 : 7.357000000000024 ,
94 : 7.406000000000025 ,
95 : 7.455000000000025 ,
96 : 7.504000000000025 ,
97 : 7.553000000000026 ,
98 : 7.602000000000026 ,
99 : 7.6510000000000264 ,
100 : 7.700000000000027 ,
101 : 7.749000000000027 ,
102 : 7.798000000000028 ,
103 : 7.847000000000028 ,
104 : 7.896000000000028 ,
105 : 7.945000000000029 ,
106 : 7.994000000000029 ,
107 : 8.04300000000003 ,
108 : 8.092000000000029 ,
109 : 8.141000000000028 ,
110 : 8.190000000000028 ,
111 : 8.239000000000027 ,
112 : 8.288000000000027 ,
113 : 8.337000000000026 ,
114 : 8.386000000000026 ,
115 : 8.435000000000025 ,
116 : 8.484000000000025 ,
117 : 8.533000000000024 ,
118 : 8.582000000000024 ,
119 : 8.631000000000023 ,
120 : 8.680000000000023 ,
121 : 8.729000000000022 ,
122 : 8.778000000000022 ,
123 : 8.827000000000021 ,
124 : 8.87600000000002 ,
125 : 8.92500000000002 ,
126 : 8.97400000000002 ,
127 : 9.02300000000002 ,
128 : 9.072000000000019 ,
129 : 9.121000000000018 ,
130 : 9.170000000000018 ,
131 : 9.219000000000017 ,
132 : 9.268000000000017 ,
133 : 9.317000000000016 ,
134 : 9.366000000000016 ,
135 : 9.415000000000015 ,
136 : 9.464000000000015 ,
137 : 9.513000000000014 ,
138 : 9.562000000000014 ,
139 : 9.611000000000013 ,
140 : 9.660000000000013 ,
141 : 9.709000000000012 ,
142 : 9.758000000000012 ,
143 : 9.807000000000011 ,
144 : 9.85600000000001 ,
145 : 9.90500000000001 ,
146 : 9.95400000000001 ,
147 : 10.003000000000009 ,
148 : 10.052000000000008 ,
149 : 10.101000000000008 ,
150 : 10.150000000000007 ,
151 : 10.199000000000007 ,
152 : 10.248000000000006 ,
153 : 10.297000000000006 ,
154 : 10.346000000000005 ,
155 : 10.395000000000005 ,
156 : 10.444000000000004 ,
157 : 10.493000000000004 ,
158 : 10.542000000000003 ,
159 : 10.591000000000003 ,
160 : 10.640000000000002 ,
161 : 10.689000000000002 ,
162 : 10.738000000000001 ,
163 : 10.787 ,
164 : 10.836 ,
165 : 10.885 ,
166 : 10.934 ,
167 : 10.982999999999999 ,
168 : 11.031999999999998 ,
169 : 11.080999999999998 ,
170 : 11.129999999999997 ,
171 : 11.178999999999997 ,
172 : 11.227999999999996 ,
173 : 11.276999999999996 ,
174 : 11.325999999999995 ,
175 : 11.374999999999995 ,
176 : 11.423999999999994 ,
177 : 11.472999999999994 ,
178 : 11.521999999999993 ,
179 : 11.570999999999993 ,
180 : 11.619999999999992 ,
}

def mover_motor(angulo):
 servo1.ChangeDutyCycle(anglesMap[angulo])
 time.sleep(0.5)
 servo1.ChangeDutyCycle(0)


while True:
 print("Input angle:")
 altitud = int(input())
 if(altitud < 90):
  mover_motor(altitud+90)
 else:
  mover_motor(180-altitud)

#Clean things up at the end
servo1.stop()
GPIO.cleanup()
print ("End")
